<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on unused Blog on GitHub</title>
    <link>http://unused.github.io/blog/</link>
    <description>Recent content in Home on unused Blog on GitHub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2017 Christoph Lipautz, any code snippet is free to use, licensed under cc by-sa 3.0</copyright>
    <lastBuildDate>Sat, 19 Aug 2017 09:40:51 +0200</lastBuildDate>
    
	<atom:link href="http://unused.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Short Words on Continuous Deployments</title>
      <link>http://unused.github.io/blog/posts/continuous-deployments/</link>
      <pubDate>Sat, 19 Aug 2017 09:40:51 +0200</pubDate>
      
      <guid>http://unused.github.io/blog/posts/continuous-deployments/</guid>
      <description>Planning and maintaining continuous integration can be tough. Keep it stable, handle multiple projects, environments, build scenarios, and in some bad cases private dependencies. With the following post I&amp;rsquo;d like to share some experience from lessons learned when dealing with continuous integrations and deployments specifically.
TL;DR
 Build your own test container image. Keep any output. Extend output by environment info. Setup ssh and inject key in before script. Build you own docker deployment image.</description>
    </item>
    
    <item>
      <title>Add eslint to rails 5.1</title>
      <link>http://unused.github.io/blog/posts/eslint-rails/</link>
      <pubDate>Sun, 06 Aug 2017 12:47:15 +0200</pubDate>
      
      <guid>http://unused.github.io/blog/posts/eslint-rails/</guid>
      <description>JavaScript is trending and on its very fast paced run creating new projects, concepts and ideas, best practices, throwing everything away again and start from scratch. That is a very good thing and for good we have now pretty neat tools that take away the very complex work of setting up a new project, keeping us left with a few nuts and bolts to configure on a higher level. A great tool handling a complex JavaScript projects is a module bundler named webpack.</description>
    </item>
    
  </channel>
</rss>