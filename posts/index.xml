<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on unused Blog on GitHub</title>
    <link>http://unused.github.io/blog/posts/</link>
    <description>Recent content in Posts on unused Blog on GitHub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Oct 2017 20:57:11 +0200</lastBuildDate>
    
	<atom:link href="http://unused.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create an awesome gitlab blog from zero to ðŸ’¯</title>
      <link>http://unused.github.io/blog/posts/gitlab-blog/</link>
      <pubDate>Sat, 21 Oct 2017 20:57:11 +0200</pubDate>
      
      <guid>http://unused.github.io/blog/posts/gitlab-blog/</guid>
      <description>TL;DR Lets create a blog powered by hugo static site generator hosted on gitlab pages with a custom https domain registered at zeit.co and letsencrypt for free.
Some Details As christmas present on 24th of December 2016 GitLab brought GitLab pages to the community edition. Those are static files served by a golang webserver. To trigger an update one enables continuous integration using a .gitlab.yml file containing a recipe that will result in collecting certain assets, so called artefacts, in a pipeline conventionally named &amp;ldquo;pages&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Short Words on Continuous Deployments</title>
      <link>http://unused.github.io/blog/posts/continuous-deployments/</link>
      <pubDate>Sat, 19 Aug 2017 09:40:51 +0200</pubDate>
      
      <guid>http://unused.github.io/blog/posts/continuous-deployments/</guid>
      <description>Planning and maintaining continuous integration can be tough. Keep it stable, handle multiple projects, environments, build scenarios, and in some bad cases private dependencies. With the following post I&amp;rsquo;d like to share some experience from lessons learned when dealing with continuous integrations and deployments specifically.
TL;DR
 Build your own test container image. Keep any output. Extend output by environment info. Setup ssh and inject key in before script. Build you own docker deployment image.</description>
    </item>
    
    <item>
      <title>Add eslint to rails 5.1</title>
      <link>http://unused.github.io/blog/posts/eslint-rails/</link>
      <pubDate>Sun, 06 Aug 2017 12:47:15 +0200</pubDate>
      
      <guid>http://unused.github.io/blog/posts/eslint-rails/</guid>
      <description>JavaScript is trending and on its very fast paced run creating new projects, concepts and ideas, best practices, throwing everything away again and start from scratch. That is a very good thing and for good we have now pretty neat tools that take away the very complex work of setting up a new project, keeping us left with a few nuts and bolts to configure on a higher level. A great tool handling a complex JavaScript projects is a module bundler named webpack.</description>
    </item>
    
  </channel>
</rss>